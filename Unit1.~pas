unit Unit1;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, CPort, CPortCtl, ComCtrls, Grids, ExtCtrls, Math, Spin,
  RXSlider, OleServer, Excel2000, TeEngine, Series, TeeProcs, Chart,
  SwitchLed,
  WinTypes,{Messages,}WinProcs,Menus, TeeFunci;

type
  TForm1 = class(TForm)
    StatusBar: TStatusBar;
    PageControl1: TPageControl;
    ButtonConnect: TButton;
    Button2: TButton;
    TabSheet1: TTabSheet;
    TabSheet2: TTabSheet;
    Label_MAP: TPanel;
    Label_SPD: TPanel;
    Label_T_INJ: TPanel;
    Label_TPS: TPanel;
    Label_IAC: TPanel;
    Label_A_TMP: TPanel;
    Label_POWER: TPanel;
    Label_COLT: TPanel;
    Label_CE: TPanel;
    ProgressBarSpeed: TProgressBar;
    ProgressBarLambda: TProgressBar;
    Panel1: TPanel;
    Label_RCO: TLabel;
    Label_RqF: TLabel;

    Label_warm_enr: TLabel;
    Label_spd_enr: TLabel;

    TabSheet3: TTabSheet;
    TabSheet4: TTabSheet;
    Label_rashod: TLabel;
    EnrEdit1: TSpinEdit;
    EnrEdit2: TSpinEdit;
    EnrEdit3: TSpinEdit;
    EnrEdit4: TSpinEdit;
    EnrEdit5: TSpinEdit;
    EnrBar: TTrackBar;
    Label21: TLabel;
    Label22: TLabel;
    Label23: TLabel;
    Label24: TLabel;
    Label25: TLabel;
    Label_warm_enr_2: TLabel;
    Label_lag: TLabel;
    Label_Moto: TLabel;
    Label_Manual_Corr: TLabel;
    Label_Lambda: TLabel;
    EDIT_RCO: TSpinEdit;
    EDIT_Cor: TSpinEdit;
    Edit_RqF: TSpinEdit;
    Label26: TLabel;
    Label27: TLabel;
    Label28: TLabel;
    Label_PND: TLabel;
    Label_UOZ: TLabel;
    Chart1: TChart;
    Series1: TBarSeries;
    Series2: TBarSeries;
    Series3: TBarSeries;
    Chart2: TChart;
    Series4: TLineSeries;
    Series5: TFastLineSeries;
    Series6: TLineSeries;
    Label_LPG: TLabel;
    TabSheet5: TTabSheet;
    GroupBox2: TGroupBox;
    GroupBox3: TGroupBox;
    LED_WDT: TComLed;
    LED_BOR: TComLed;
    LED_T_INJ: TComLed;
    LED_Err3: TComLed;
    LED_COLT: TComLed;
    LED_MAP: TComLed;
    LED_bit6: TComLed;
    LED_bit7: TComLed;
    ComPort: TComPort;
    ComDataPacket: TComDataPacket;
    StringGrid: TStringGrid;
    GroupBox1: TGroupBox;
    Led_0: TComLed;
    Led_1: TComLed;
    Led_2: TComLed;
    Led_3: TComLed;
    Led_4: TComLed;
    Led_5: TComLed;
    Led_6: TComLed;
    Led_7: TComLed;
    Label3: TLabel;
    Label4: TLabel;
    Label6: TLabel;
    Label14: TLabel;
    Label15: TLabel;
    Label16: TLabel;
    Label17: TLabel;
    Label2: TLabel;
    Label7: TLabel;
    Label9: TLabel;
    Label10: TLabel;
    Label11: TLabel;
    Label12: TLabel;
    Label13: TLabel;
    Label18: TLabel;
    Label20: TLabel;
    ComLed1: TComLed;
    ComLed2: TComLed;
    ComLed3: TComLed;
    ComLed4: TComLed;
    ComLed5: TComLed;
    ComLed6: TComLed;
    ComLed7: TComLed;
    ComLed8: TComLed;
    Label1: TLabel;
    LED_Mtron: TComLed;
    LED_IAC: TComLed;
    LED_Warm: TComLed;
    Label37: TLabel;
    L_AFR: TStaticText;
    Chart3: TChart;
    Series7: TLineSeries;
    StringGrid1: TStringGrid;
    TeeFunction1: TAverageTeeFunction;
    Label_Cur: TLabel;
    ComDataPacket_Settings: TComDataPacket;
    procedure Button2Click(Sender: TObject);
    procedure ButtonConnectClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure FormShow(Sender: TObject);
    procedure ComDataPacketPacket(Sender: TObject; const Str: String);
    Procedure DoWhatEver;
    Procedure WinMsg (Var Msg : TMsg; Var Handled : Boolean);
    procedure ComPortAfterOpen(Sender: TObject);
    procedure ComPortAfterClose(Sender: TObject);
    procedure StringGrid1SetEditText(Sender: TObject; ACol, ARow: Integer; const Value: String);
    procedure Chart2DblClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;
  PacketCount: Integer;
  OldStr     : String;
  errors: integer;
  f	: TextFile;//file of char;
  x	: char;
  myDate : TDateTime;
  FileName : String;
implementation

Const ItemID = 1025;//99; // ID номер для пункта меню. Может быть любым
{$R *.dfm}

procedure TForm1.Button2Click(Sender: TObject);
begin
     ComPort.ShowSetupDialog;
end;

procedure TForm1.ButtonConnectClick(Sender: TObject);
begin
  // открытие порта
  if ComPort.Connected then
          ComPort.Close
     else
          ComPort.Open;

  if ComPort.Connected then
  begin
     //ButtonConnect.Enabled:= False;
     Button2.Enabled:= False;
     ButtonConnect.Caption:='Disconnect';
     PacketCount:=0;
     errors:=0;
     StatusBar.Panels[0].Text:= 'Status: Connected to ' + ComPort.Port;
  end
  else
  begin
      ButtonConnect.Caption:='Connect';
      Button2.Enabled:= True;
      StatusBar.Panels[0].Text:= 'Status: Disconnected ';
      Label_CE.Color:=clBtnFace;
  end;

  // задаем заголовок пакета и его длину
  ComDataPacket.StartString:= chr(175) + chr(1) + chr(16);
  ComDataPacket.Size:= 38;
  ComDataPacket_Settings.StartString:= chr($A5) + chr($01)+ chr($10)+ chr($10);
  ComDataPacket_Settings.Size:= 25;
end;

procedure TForm1.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  if ComPort.Connected then
	try
		ComPort.Close;
	except
		CloseFile(f);
		Application.Terminate;
		Exit;
	end;
  ComPort.StoreSettings(stRegistry, 'HKEY_LOCAL_MACHINE\Software\JET');
end;

Procedure Tform1.WinMsg (Var Msg : TMsg; Var Handled : Boolean);
Begin

	If Msg.Message = WM_SYSCOMMAND Then
	Begin
		If Msg.WParam = ItemID Then DoWhatEver;
		if   Msg.WParam = WM_CLOSE then exit;
	end;
End;
Procedure TForm1.DoWhatEver;
Begin

	ComPort.ShowSetupDialog;//Exit;    // Вы можете добавить здесь всё, что угодно
End;





procedure TForm1.FormShow(Sender: TObject);
  var f: file of char;
      x: char;

begin
     ComPort.LoadSettings(stRegistry, 'HKEY_LOCAL_MACHINE\Software\JET');

     AppendMenu (GetSystemMenu (Form1.Handle, False), MF_SEPARATOR, 0, '');
     AppendMenu (GetSystemMenu (Form1.Handle, False), MF_BYPOSITION, ItemID, '&Port config...');
     //AppendMenu (GetSystemMenu (Application.Handle, False), MF_SEPARATOR, 0, '');
     //AppendMenu (GetSystemMenu (Application.Handle, False), MF_BYPOSITION, ItemID,'&My menu minimized');
     AppendMenu (GetSystemMenu (Form1.Handle, False), MF_BYPOSITION, ItemID, '&Test');
     PageControl1.ActivePageIndex:=0;


     PacketCount:=0;
     With StringGrid do
     begin
	Cells [1,0]:= ' STAT';
	Cells [2,0]:= ' ERR';
	Cells [3,0]:= ' STPCNT';
	Cells [4,0]:= ' ColtF';
	Cells [5,0]:= ' COLT';
	Cells [6,0]:= ' MAP';
	Cells [7,0]:= ' TPS';
	Cells [8,0]:= ' O2S';
	Cells [9,0]:= ' POWER';
	Cells [10,0]:= ' RPM ';
	Cells [11,0]:= ' T_INJ';
	Cells [12,0]:= ' Lag';
	Cells [13,0]:= ' RqF';
	Cells [14,0]:= ' RCO';
	Cells [15,0]:= ' MCK';
	Cells [16,0]:= ' WARM_80';
        Cells [17,0]:= ' WARM_20';
        Cells [18,0]:= ' ExtSTAT';
        Cells [19,0]:= ' WARM_40';
        Cells [20,0]:= ' WARM_50';
        Cells [21,0]:= ' D_TPS';
        Cells [22,0]:= ' ENR_12';
        Cells [23,0]:= ' Res1';
        Cells [24,0]:= ' Res2';
        Cells [25,0]:= ' UOZ';
        Cells [26,0]:= ' Man';
        Cells [27,0]:= ' SPD_ENR';
        Cells [28,0]:= ' WARM_ENR';
     end;
     With StringGrid1 do
     begin
	Cells [0,0]:= '400';
	Cells [1,0]:= '800';
	Cells [2,0]:= '1200';
	Cells [3,0]:= '1600';
	Cells [4,0]:= '2400';
	Cells [5,0]:= '3200';
	Cells [6,0]:= '4000';
	Cells [7,0]:= '4800';
	Cells [8,0]:= '5600';
	Cells [9,0]:= '6400';
	Cells [10,0]:= '7200';
     end;
     Series7.AddY(62);
     Series7.AddY(72);
     Series7.AddY(73);
     Series7.AddY(77);
     Series7.AddY(81);
     Series7.AddY(82);
     Series7.AddY(88);
     Series7.AddY(85);
     Series7.AddY(78);
     Series7.AddY(74);
     Series7.AddY(70);
     //Series7.[2]=50;
end;

procedure TForm1.ComDataPacketPacket(Sender: TObject; const Str: String);
var check, size, i: byte;
	AFR : shortint;
	 EGRD_Curr :  integer;
     Data: Array [1..255] of byte;
begin
//     showmessage (intTostr(length(str)));
     check:= 175+1+16;
//     size:= ord (Str[4]);
     for i:= 1 to 34 do
     begin
	  Data [i]:= ord (Str[i]);
	  check:= check + ord (Str[i]);
//          Showmessage (IntToStr(i) + ' - ' + IntToStr(ord(Str[i])) );
     end;
     if check <> ord (Str[35]) then
	      begin
               errors:= errors+1;
               exit;
              end;
//     showmessage (FloatToStr(check mod 256));}
     inc (PacketCount);
     StatusBar.Panels[1].Text:= ' Пакетов принято: ' + IntToStr (PacketCount) + '  Ошибок: '+IntToStr (errors) ;
     AFR:= Data[9];   //Lambda
     EGRD_Curr:= (Data[28]-127)*2;
// Запись лога
     DecimalSeparator := '.';
     //Write(f, IntToStr (PacketCount),',');
     Write(f, FormatDateTime('hh:nn:ss:zzz',Now)+',');  //Time
     Write(f,  IntToStr(Data[11] * 25),',');  //RPM
     Write(f, IntToStr(Round(Data[7]/1.28)),',');  //MAP
     Write(f, FloatToStrF(RoundTo(Data[31]/51,-2),ffFixed,1,2),','); //PND_EMUL
     Write(f, FloatToStrF(RoundTo(Data[29]/51,-2),ffFixed,1,2),','); // PND input Ext
     Write(f, FloatToStrF(RoundTo(Data[8]/51,-2),ffFixed,1,2),','); // TPS
     Write(f, FloatToStrF(EGRD_Curr,ffGeneral,3,3),','); //ЭГРД
     Write(f, FloatToStr(RoundTo(Data[10]/10.2,-1)),',');  //Voltage
     Write(f, IntToStr(Round((((Data[5]+234)/2)*(5/256))*100-273)),',');  //Temper
     Write(f, FloatToStr(RoundTo((AFR/2+127)/128,-2)),','); // Lambda
     if Data[2] AND 4 <> 0 then Write(f, '1,') else Write(f, '0,') ; //Idle
     if Data[2] AND 64 <> 0 then  Write(f, '1,') else Write(f, '0,') ; //Full
     if Data[2] AND 32 <> 0 then  Write(f, '1,') else Write(f, '0,') ;  //CutOff
     if Data[2] AND 128 <> 0 then  Write(f, '1,') else Write(f, '0,') ; //AFR
     if Data[2] AND 8 <> 0 then    Write(f, '1,') else Write(f, '0,') ;  //Accel
     Writeln(f,'');









     if OldStr <> Str then
     begin
	     if Data[2] AND 1 <> 0 	then
				begin
					 Led_0.State:=lsOn; LED_Mtron.State:=lsOn;
				end
					else
				begin
					Led_0.State:=lsOff;  LED_Mtron.State:=lsOff;
				end;
	     if Data[2] AND 2 <> 0 then
				begin
					 Led_1.State:=lsOn; LED_Warm.State:=lsOn;
				end
					 else
				begin
					Led_1.State:=lsOff; LED_Warm.State:=lsOff;
				end;
	     if Data[2] AND 4 <> 0 then
				begin
					 Led_2.State:=lsOn;   LED_IAC.State:= lsOn;
				end
					 else
				begin
					 Led_2.State:=lsOff;  LED_IAC.State:=lsOff;
				end;
	     if Data[2] AND 8 <> 0 then Led_3.State:=lsOn else Led_3.State:=lsOff;
             if Data[2] AND 16 <> 0 then Led_4.State:=lsOn else Led_4.State:=lsOff;
	     if Data[2] AND 32 <> 0 then Led_5.State:=lsOn else Led_5.State:=lsOff;
	     if Data[2] AND 64 <> 0 then Led_6.State:=lsOn else Led_6.State:=lsOff;
	     if Data[2] AND 128 <> 0 then Led_7.State:=lsOn else Led_7.State:=lsOff;

             if Data[3] AND 1 <> 0 then Led_WDT.State:=lsOn else Led_WDT.State:=lsOff;
             if Data[3] AND 2 <> 0 then LED_BOR.State:=lsOn else LED_BOR.State:=lsOff;
             if Data[3] AND 4 <> 0 then LED_T_INJ.State:=lsOn else LED_T_INJ.State:=lsOff;
             if Data[3] AND 8 <> 0 then LED_Err3.State:=lsOn else LED_Err3.State:=lsOff;
             if Data[3] AND 16 <> 0 then LED_COLT.State:=lsOn else LED_COLT.State:=lsOff;
             if Data[3] AND 32 <> 0 then LED_MAP.State:=lsOn else LED_MAP.State:=lsOff;
	     if Data[3] AND 64 <> 0 then
				begin
					LED_Bit6.State:=lsOn; ProgressbarLambda.Brush.Color:=clYellow;
				end
					 else
				begin
					LED_Bit6.State:=lsOff;
				end;
             if Data[3] AND 128 <> 0 then LED_Bit7.State:=lsOn else LED_Bit7.State:=lsOff;

	     if Data[24] AND 1 <> 0 then ComLed1.State:=lsOn else ComLed1.State:=lsOff;
             if Data[24] AND 2 <> 0 then ComLed2.State:=lsOn else ComLed2.State:=lsOff;
             if Data[24] AND 4 <> 0 then ComLed3.State:=lsOn else ComLed3.State:=lsOff;
             if Data[24] AND 8 <> 0 then ComLed4.State:=lsOn else ComLed4.State:=lsOff;
             if Data[24] AND 16 <> 0 then ComLed5.State:=lsOn else ComLed5.State:=lsOff;
             if Data[24] AND 32 <> 0 then ComLed6.State:=lsOn else ComLed6.State:=lsOff;
             if Data[24] AND 64 <> 0 then ComLed7.State:=lsOn else ComLed7.State:=lsOff;
	     if Data[24] AND 128 <> 0 then
				begin
					ComLed8.State:=lsOn;  ProgressbarSpeed.Brush.Color := clYellow;
				end
					   else
				begin
					 ComLed8.State:=lsOff;  ProgressbarSpeed.Brush.Color := clBtnFace;
				end;



             if Data[3] <> 0 then
			   if Data[3] AND 36 <> 0 then  Label_CE.Color:=clRed else Label_CE.Color:=clYellow
	     else Label_CE.Color:=clLime;

	     if Data[3] AND 4 <> 0 then Label_T_INJ.Color:=clRed else Label_T_INJ.Color:=clBtnFace;
	     if Data[3] AND 32 <> 0 then Label_MAP.Color:=clRed else Label_MAP.Color:=clBtnFace;
             if Data[3] AND 16 <> 0 then Label_COLT.Color:=clYellow else Label_COLT.Color:=clBtnFace;

	     Label_IAC.Caption:= 'IAC ' + IntToStr(Data[4]);
	     i:= Data[8]; if i <25 then i:= 25; if i > 225 then i:= 225; i:= i-25;
	     Label_TPS.Caption:= 'TPS '+ IntToStr(Round(i/2)) + '%';
	     Label_POWER.Caption:= '+' + FloatToStr(RoundTo(Data[10]/10.2,-1)) + 'v';
	     Label_SPD.Caption:= IntToStr(Data[11] * 25) + ' об';
	     ProgressBarSpeed.Position:= Data [11];
	     Label_T_INJ.Caption:= FloatToStr(RoundTo((Data[13]*256+Data[12])/1000,-3)) + ' mS';
	     if Data[30] AND 0 <> 1
             then
		 Label_MAP.Caption:= FloatToStr(Round(Data[7]/1.28)) + ' КПа'
	     else
		 Label_MAP.Caption:= FloatToStr(Round((Data[7]/51+0.76)/0.05295)) + ' КПа';

	     //if Data [9] AND 128 <> 0 then AFR:= {(not}(Data[9]){ or 128)-1} else AFR:= Data [9];
	     ProgressBarLambda.Position:= 127 + AFR;
	     L_AFR.Caption:=   IntToStr(AFR);
	     Label_Lambda.Caption:='Лямбда: ' + FloatToStr(RoundTo((AFR/2+127)/128,-2))+' (AFR '+FloatToStr(RoundTo(((AFR/2+127)/128)*14.7,-1))+')';

	     Label_RCO.Caption:= 'RCO, mS:  ' + FloatToStr(RoundTo((Data[19]*256+Data[18])/1000,-3));
	     Label_RqF.Caption:= 'RqF, mS:  ' + FloatToStr(RoundTo((Data[17]*256+Data[16])/1000,-3));
	     Label_COLT.Caption:= IntToStr (Round((((255-Data[6])/4+117)/51)*100-273)) + '°C';
	     Label_A_TMP.Caption:=IntToStr(Round((((Data[5]+234)/2)*(5/256))*100-273)) + '°C';
	     Label_Warm_Enr_2.Caption:= IntToStr(Round((Data[34]+1)/128*100));
	     Label_Warm_Enr.Caption:= 'WARM_ENR, %: ' + Label_Warm_Enr_2.Caption;
	     Label_Spd_Enr.Caption:= 'SPD_ENR, %: ' + IntToStr(Round(Data[33]/128*100));
	     Label_Rashod.Caption:= 'Расход, л/ч: ' + FloatToStr(RoundTo((0.00000000808 * (Data[13]*256+Data[12]) * Data[11]*25*60*2),-2));
	     Label_lag.Caption:= 'Лаг:' + FloatToStr(RoundTo((Data[15]*256+Data[14])/1000,-3)) + ' mS';
	     Label_Moto.Caption:='Моточасы:'+ FloatToStr((Data[21]*256+Data[20])) ;
	     Label_Manual_Corr.Caption:='Ручная коррекция (RAW) ' + FloatToStr(Data[32]) ;
	     Label_Cur.Caption:='ЭГРД: ' +  FloatToStrF(EGRD_Curr,ffGeneral,3,3) + ' mA';

	     Label_PND.Caption:= 'Эмулятор ПНД: ' + FloatToStr(RoundTo(Data[31]/51,-2));
	     Label_UOZ.Caption:= 'УОЗ: '+ FloatToStr(RoundTo(Data[31]/2,-1))+'°';
	     Label_LPG.Caption:='Давление газа: '+ FloatToStr(Round((Data[19]*256+Data[18])/2.56))+' / '+ FloatToStr(Round((Data[19]*256+Data[18])/2.56)-Round(Data[7]/1.28))  +' КПа';
	     EnrBar.Position:= Data[6];
	     EnrEdit1.Value:= Round((Data[22]+1)/256*100+100);
	     EnrEdit2.Value:= Round((Data[26]+1)/256*100+100);
	     EnrEdit3.Value:= Round((Data[23]+1)/256*100+100);
	     EnrEdit4.Value:= Round((Data[28]+1)/256*100+100);
             EnrEdit5.Value:= Round((Data[25]+1)/256*100+100);
             EDIT_RCO.Value:=  Round(Data[19]*256+Data[18]);
             EDIT_Cor.Value:=  Data[32];
	     EDIT_RqF.Value:= Round((Data[17]*256+Data[16]));
	     if Data[24] AND 1 <> 0 then Label_CE.Caption:= FloatToStr(RoundTo(( ((Data[19]*256+Data[18])/2.56) - (Data[7]/1.28) )/100,-2)) + ' bar' else   Label_CE.Caption:= 'CHECK';


             // вывод отладочной информации
             With StringGrid do
	     begin
		  Cells [0,StringGrid.RowCount - 1]:= IntToStr(StringGrid.RowCount - 1);
                  Cells [1,StringGrid.RowCount - 1]:= '   '+IntToHex(Data[2],2);
                  Cells [2,StringGrid.RowCount - 1]:= '   '+IntToHex(Data[3],2);
		  Cells [3,StringGrid.RowCount - 1]:= '   '+IntToStr(Data[4]);
		  Cells [4,StringGrid.RowCount - 1]:= '   '+IntToStr(Round((((Data[5]+234)/2)*(5/256))*100-273))+'°C';
		  Cells [5,StringGrid.RowCount - 1]:= '   '+IntToHex(Data[6],2);
                  Cells [6,StringGrid.RowCount - 1]:= '   '+IntToHex(Data[7],2);
                  Cells [7,StringGrid.RowCount - 1]:= '   '+IntToHex(Data[8],2);
                  Cells [8,StringGrid.RowCount - 1]:= '   '+IntToHex(Data[9],2);
                  Cells [9,StringGrid.RowCount - 1]:= '   '+FloatToStr(RoundTo(Data[10]/10.2,-1))+'V';
                  Cells [10,StringGrid.RowCount - 1]:= '  '+IntToStr(Data[11]*25);
                  Cells [11,StringGrid.RowCount - 1]:= ' '+IntToStr(Data[13]*256 + Data[12]);
                  Cells [12,StringGrid.RowCount - 1]:= ' '+IntToStr(Data[15]*256 + Data[14]);
                  Cells [13,StringGrid.RowCount - 1]:= ' '+IntToStr(Data[17]*256 + Data[16]);
                  Cells [14,StringGrid.RowCount - 1]:= ' '+IntToStr(Data[19]*256 + Data[18]);
                  Cells [15,StringGrid.RowCount - 1]:= ' '+IntToStr(Data[21]*256 + Data[20]);
                  Cells [16,StringGrid.RowCount - 1]:= '   '+IntToHex(Data[22],2);
                  Cells [17,StringGrid.RowCount - 1]:= '   '+IntToHex(Data[23],2);
                  Cells [18,StringGrid.RowCount - 1]:= '   '+IntToHex(Data[24],2);
                  Cells [19,StringGrid.RowCount - 1]:= '   '+IntToHex(Data[25],2);
		  Cells [20,StringGrid.RowCount - 1]:= '   '+IntToHex(Data[26],2);
                  Cells [21,StringGrid.RowCount - 1]:= '   '+IntToHex(Data[27],2);
		  Cells [22,StringGrid.RowCount - 1]:= '   '+IntToHex(Data[28],2);
                  Cells [23,StringGrid.RowCount - 1]:= '   '+IntToHex(Data[29],2);
                  Cells [24,StringGrid.RowCount - 1]:= '   '+IntToHex(Data[30],2);
		  Cells [25,StringGrid.RowCount - 1]:= '   '+IntToHex(Data[31],2);
                  Cells [26,StringGrid.RowCount - 1]:= '   '+IntToHex(Data[32],2);
                  Cells [27,StringGrid.RowCount - 1]:= '   '+IntToHex(Data[33],2);
                  Cells [28,StringGrid.RowCount - 1]:= '   '+IntToHex(Data[34],2);
             end;
             StringGrid.RowCount:= StringGrid.RowCount + 1;
     end;
     OldStr:= Str;
     //ProgressbarSpeed.Brush.Color := clYellow;

     Series4.AddY(Round((Data[7]/51+0.76)/0.05295),IntToStr (PacketCount),10000);
     Series5.AddY(Data[11] * 25,IntToStr (PacketCount),10000);
     Series6.AddY(Round((Data[9]/2+64)/128),IntToStr (PacketCount),10000);
     
end;


procedure TForm1.ComPortAfterOpen(Sender: TObject);

begin
	//TimeSeparator := '.';
	//LongTimeFormat := 'hh:mm:ss:zzz';
	//DateSeparator := '.';
	//myDate := StrToDateTime(Now);
	FileName:=FormatDateTime('yymmdd_hhnnss',Now);
	AssignFile (f, 'Logdata_'+FileName+'.CSV');
	Rewrite(f);//файла нет или он должен быть перезаписан, открытие для записи
	//Reset(f);//файл есть и его надо открыть для чтения (с первой строки)
	//Append(f);//файл есть и его надо открыть для дописования строк в конец

	WriteLn(f, '"Time","RPM","Map","PND_EM","PND","Tps","CUR","Voltage","Temp","Lambda","InputSwIdleFlag","InputSwFullLoadFlag","IdleCutoffFlag","AfterStartEnrichFlag","AccelFlag",');//

end;

procedure TForm1.ComPortAfterClose(Sender: TObject);
begin
	CloseFile(f);
end;

procedure TForm1.StringGrid1SetEditText(Sender: TObject; ACol,
  ARow: Integer; const Value: String);
  var
	Num1, i: Integer  ;
	 s: String;
	 f: Boolean;
begin
// Удаляем недопустимые символы из строки
  f:=false;
      for i := 1 to Length(Value)
	do if Value[i] in ['0'..'9'{,'.'}]
	   then s := s + Value[i] else f:= true;
  if f = true then StringGrid1.Cells[ACol,1]:= s;
  try
       	Num1:= StrToInt(s);
	Series7.YValue[ACol]:=Num1;
	//StringGrid1.Cells[ACol,1]:=IntToStr(Num1);
	//StringGrid1.
  except  on EConvertError do
	//StringGrid1.Color:=clYellow;
  end;
end;

procedure TForm1.Chart2DblClick(Sender: TObject);
begin
	Series4.Clear;
	Series5.Clear;
	Series6.Clear;
end;

end.
